<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Cmd Markdown 编辑阅读器]]></title>
    <url>%2F2018%2F02%2F26%2FCmd%20Markdown%2F</url>
    <content type="text"><![CDATA[欢迎使用 Cmd Markdown 编辑阅读器 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 支持以 PDF 格式导出文稿 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 新增 Todo 列表功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 \$1600 5 手机 \$12 12 管线 \$1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。]]></content>
      <categories>
        <category>Markdown编辑器</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown和Haroopad介绍]]></title>
    <url>%2F2018%2F02%2F25%2Fharoopad_test%2F</url>
    <content type="text"><![CDATA[简介Haroopad：一款让你欲罢不能的Markdown编辑器身为大程序员，我本来是不需要 Markdown 编辑器的，但是 Haroopad 让我简直欲罢不能，不能再爱更多。跨平台，代码高亮，Vim 键绑定，多列模式，行号，折叠， Github Flavored Markdown 等功能~ 其实它最吸引我的是它的所见即所得的绘图功能。 安装方法下面是在Ubuntu 14.04 64bit上的安装实录. 从官网下载x86的deb包,双击安装即可 安装完成后，从Unity中输入Haroopad即可打开程序界面 使用方法下面给出了一个markdown源码示例的使用说明，参见参考文献[3][html] view plain copy在CODE上查看代码片派生到我的代码片 Markdown和Haroopad介绍文档[TOC “float:left”] 什么是Markdown Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。简而言之的说，它可以通过类似HTML的标记语法，使普通文本内容具有一定的格式。 Markdown有哪些优点 纯文本实现，使用任何文本编辑器均可编辑，全平台通用。 排版清晰简洁，可读性较高，使用扩展可以获得更多语法格式支持，漂亮美观。 语法简洁，上手较快，任何人均可在短时间内学会。即使不会语法的读者，也可以读懂其原始文件的内容。 丰富的工具链支持： 编辑器：各种支持所见即所得的编辑器，如本文介绍的Haroopad。 平台支持：各大博客系统、Wiki系统均有相关插件，代码托管平台Github也支持使用Markdown来编写Readme文件。 和其他格式进行转化：可以方便的转化为HTML文件等。 Markdown的基本语法 Markdown的基本语法非常简单，本文即用Markdown完成。​ 标题 可以在标题内容前输入特定数量的井号(‘#’)来实现对应级别的HTML样式的标题(HTML提供六级标题)。例如： # 一级标题 #### 四级标题 一级和二级标题还有一种写法： 一级标题 =================== 二级标题 -------------------- 特殊格式字体 在需要改变的文字片段前后 使用一对符号可以改变文字为特殊格式： 粗体 使用**文字**或者__文字__ 效果： 这里请大家尤其注意！ 斜体 使用*文字*或者_文字_ 效果： 会不调用父类的 析构函数 呢？ 高亮 使用==文字== 效果： ==这里是高亮的重点==，但这里不是。 下划线 使用++文字++ 效果： 如果此时的++判断结果为真++…… 删除线 使用~~文字~~ 效果： 1.2的版本已经修复这个Bug？ 上角标 使用^文字^ 效果： 单位圆的方程式是x^2^+y^2^=1。 下角标 使用~文字~ 效果： 最常见的氧化反应是C+O~2~=CO~2~ 外部内容嵌入 图像 使用![text](url)来贴入图片 效果： 链接 使用[linkText](url)来插入链接 效果：博客首页 电子邮件 使用&lt;邮件地址&gt;来插入邮件地址 效果：&#99;&#100;&#x73;&#97;&#109;&#97;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#109; 列表无序列表 使用如下格式(*+-可以任意替换): * 第一章 * 第二章 + 第一条 + 第二条 - 第一则 效果： 第一章 第二章 第一条 第二条 第一则 有序列表 使用如下格式(即为效果)： 1. 内容 2. 内容 3. 内容 表格 简单表格如下，分号的位置表示对齐方式： |这里是列名一|列二|三| |:-|:-:|-:| |这列是左对齐|这列是居中对齐|这列是右对齐| |左对齐|居中对齐|右对齐| ​ 效 果：​| 项目 | 价格 | 数量 || ——– | —–: | :—-: || 计算机 | \$1600 | 5 || 手机 | \$12 | 12 || 管线 | \$1 | 234 | 分割线 以下三个连续符号构成一个分割线，分别是三种不同的分割线： *** --- ___ 效果： 换行、空格和标记符号 在浏览器中一般情况下，Markdown会删除所有换行和空格，打乱原有的缩进和排版。通过回车和至少两个空格可以强制换行。 要打出连续空格可以用输入法输入全角中文空格或者： 半字大的空白或 全字大的空白或 不断行的空白格或 若要输出符号原本的意思可以加斜线\来输出 例如： * 不是列表​ 引用 使用右尖括号即可插入一段引用，例如： &gt; 这里是一段引用 &gt;&gt; 书是人类进步的阶梯。 --高尔基 &gt; &gt; 退出二级引用 ​ 效果： 这里是一段引用 书是人类进步的阶梯。 –高尔基 退出二级引用 代码 使用一对反引号即可包含一个行内代码，使用一对三个反引号可以包括多行代码，另外多行Tab也可以用于代码段，例如： code 效果：print(&quot;hello&quot;); 123456#include &lt;iostream&gt; int main() &#123; std::cout&lt;&lt;"hello world!""&lt;&lt;std::endl; return 0; &#125; Haroopad介绍 Haroopad是一个韩国人写的Markdown编辑器，项目主页是： Haroopad - The Next Document processor based on Markdown Haroopad的优点和缺点 优点： 跨Windows、Mac、Linux三大平台。 支持实时渲染，可以在编写的时候实时查看效果。 支持复制、导出到HTML。 支持多种编程语言语法高亮。 支持绘制各种流程时序图等非标准Markdown格式。 缺点： 暂时不支持导出到PDF等格式 Haroopad支持的额外语法目录 单行插入[toc]或[TOC]即可生成目录 脚注 使用[^id] [^id]:text即可生成一对脚注 ^demo 代码语法高亮 在12345678910111213 例如````python` ```python @requires_authorization def somefunc(param1=&apos;&apos;, param2=0): &apos;&apos;&apos;A docstring&apos;&apos;&apos; if param1 &gt; param2: # interesting print &apos;Greater&apos; return (param2 - param1 + 1) or None class SomeClass: pass &gt;&gt;&gt; message = &apos;&apos;&apos;interpreter ... prompt&apos;&apos;&apos; 计划任务列表 使用- [ ] task name - [x] finished task来创建计划任务。 效果： 任务1 任务2 图像绘制 图像绘制使用了mermaid引擎(访问该项目地址)。 目前支持流程图和时序图，可以在该项目Wiki上查看更多用法，以下列举两个最基本的例子。 流程图： 12345678910111213141516171819graph TD subgraph 子图 a1[矩形] a2&gt;旗帜形] a3(圆角方形) end subgraph 第二个子图 b1((圆形)) b2&#123;斜方形&#125; end a1--&gt;|实线箭头|a2 a2--&gt;a1 a2-.-&gt;|虚线箭头|a3 a3-.-&gt;a2 a3==&gt;|加粗箭头|a1 a1==&gt;a3 b1---b2 b2---|实线无箭头|b1 a1--&gt;b1 时序图： 12345678910sequenceDiagram Alice-&gt;&gt;Bob: Hello Bob, how are you? alt is sick Bob-&gt;&gt;Alice: Not so good :( else is well Bob-&gt;&gt;Alice: Feeling fresh like a daisy end opt Extra response Bob-&gt;&gt;Alice: Thanks for asking end 在haroopad中的效果如下，你可以借鉴该说明来编写自己的markdown文件或绘制流程图 流程图和时序图的绘制Hapoopad目前通过mermaid可以支持流程图和时序图的绘制，为了更好地绘制我们需要的图形，我们需要深入了解mermaid的语法。下面是一些语法文档，需要逐个了解http://knsv.github.io/mermaid/#mermaidmermaid的源码参见https://github.com/knsv/mermaid 参考文献[1].https://github.com/songshaodong/mermaid 源码[2].http://pad.haroopress.com/user.html 官网[3].http://blog.walkcd.com/applies-to-documentation-of-markdown-and-haroopad-presentation/]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Haroopad</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tutorials in Learning OpenFOAM]]></title>
    <url>%2F2018%2F02%2F24%2FTutorials%20in%20Learning%20OpenFOAM%2F</url>
    <content type="text"><![CDATA[OpenFOAM (Open Source Field Operation and Manipulation) is a framework for developing application executables that use packaged functionality contained within a collection of approximately 100 C++ libraries. OpenFOAM is shipped with approximately 250 pre-built applications that fall into two categories: solvers, that are each designed to solve a specific problem in fluid (or continuum) mechanics; and utilities, that are designed to perform tasks that involve data manipulation. The overall structure of OpenFOAM is shown in the figure below. The interface to the pre- and post-processing are themselves OpenFOAM utilities, thereby ensuring consistent data handling across all environments. Official TutorialsForums and BlogsBooksF. Moukalled, L. Mangali, The Finite Volume Method in Computational Fluid Dynamics, An Advanced Introduction with OpenFOAM and Matlab, Springer, 2015 Slides]]></content>
      <categories>
        <category>CFD</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>OpenFOAM</tag>
        <tag>CFD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DSMC-Couette]]></title>
    <url>%2F2018%2F02%2F09%2FDSMC-Couette%2F</url>
    <content type="text"><![CDATA[DSMC Main Program to simulate planar Couette flow. 在Microsoft Visual Studio 2015编译环境下运行，]]></content>
      <categories>
        <category>CFD</category>
      </categories>
      <tags>
        <tag>DSMC</tag>
        <tag>planar Couette flow</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[哥伦比亚大学教授：我多希望上大学前有人告诉我这十件事]]></title>
    <url>%2F2018%2F02%2F09%2F%E5%93%A5%E4%BC%A6%E6%AF%94%E4%BA%9A%E5%A4%A7%E5%AD%A6%E6%95%99%E6%8E%88%EF%BC%9A%E6%88%91%E5%A4%9A%E5%B8%8C%E6%9C%9B%E4%B8%8A%E5%A4%A7%E5%AD%A6%E5%89%8D%E6%9C%89%E4%BA%BA%E5%91%8A%E8%AF%89%E6%88%91%E8%BF%99%E5%8D%81%E4%BB%B6%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[来源：理想岛微信公众号 作者：Christopher Blattman（翻译来源自网络） Christopher Blattman ，MPA毕业于哈佛大学，博士生涯在加州大学伯克利分校度过。毕业后先后供职世界银行组织和耶鲁大学。2014年以教授的身份进入哥伦比亚大学。 他发布在推特上的文章《10 things I wish every student knew about how to be successful in college - me in》红遍全球。 他说，“希望在上大学前，有人曾告诉我这10件事” …我是一名大学教授，有在哥伦比亚大学、耶鲁大学、芝加哥大学教学的经验。今天说的这十件事，我已经给所有到过我办公室的学生都建议过。我不认为这些建议只适用于名牌大学，我希望我的建议适用于每一个孩子。 这些建议的大部分我自己没有遵从，所以我把这些建议叫做 “我希望有人曾经告诉我的10件事情”。我是教经济学、政治学的。我的大部分学生都是社会科学类专业，计划毕业后进入商业、法律或公共服务领域。所以这个列表对这些学生帮助很大。虽然我不懂怎样才能成为一名物理学家或艺术家，但我敢打赌，这些建议对大部分学生是有意义的。 1 找到适合自己的专业 &ensp; Try careers on for size 你的职业生涯将是你生命中的一个巨大的一部分，它如果适合你的强项，你会感觉充实，你会更快乐。有些人很幸运在他们的第一次尝试就找到。我却花了三四次尝试去摸索。 不要等到你完成法学院或医学院才发现你不喜欢你的专业工作。尽量及早并经常测试。在夏天从事不同的职业 - 研究员，记者，医疗助理，非营利性工作者，国会助理，等等。 我个人开始了学习会计和商业。幸运的是，我去了一所大学，帮助大一的学生在他们的专业机构工作。当我完成了我大三的时候，我有12个月的税收和审计经验，而且我知道，我不仅讨厌它，但我在这些方面是真的很不擅长。 于是我转向主修经济学，并尝试了夏天的管理咨询。这对我来说更有趣，我做得更好，但它仍然不是我心底里的欲望。我修完了我的学位，并且知道这两个职业我不想做了，我想到了第三个：国际发展，待在在学术界。过了好几年，我才有了这样一份工作。但是比起我之前的工作，努力起来要快很多。 2 掌握那些在校外很难获得的技能 &ensp;Develop skills that are hard to get outside the university 进入大学，我们的日程表将会填满诱人的学科课程。我的一些最美好的回忆是历史和心理学课程，他们打开了我心灵带来了新的思想。但不要忘了还要用大学的时间来建立你的技术技能。 技术技能，我指的是很难自学的专业知识。我把数学、统计、法律、会计归于这一类。这些课程都是需要一个经验丰富的导师指导，加上学分的压力，才能学会这些难的课程。通常情况下，这些技能也是许多工作中的基本构建块。 对于任何有兴趣在法律、公共政策、商业、经济、医学，或任何真正的职业，我建议至少两个学期学统计。数据是在这些领域工作的越来越重要，统计的是你要学会理解的语言。无论是作为管理顾问，还是担任研究员， 我希望自己当初学过更多统计。 即使你没有在工作中使用它，你也将使用在生活中的统计数据里。如果不懂统计，你很难充分体会纽约时报的文章。比如当你二三十岁的时候，你可能会在意对妊娠的研究，而当你60岁时，要看明白在疾病和药物的研究… 3 学会写作 &ensp; Learn how to write well 认真对待写作这件事。不管你从事什么职业，你都需要写作。能够将复杂的想法用简洁、直接、平实的句子表达出来，这是非常有用的技能。无论未来的你是一名律师、营业员、博主或医生，你都要学会思维清晰，然后像说话一样写下来。 你会惊奇地发现生活中居然有那么多建议、报告和信件要写，写电子邮件可能是你与你的老板、同事、朋友及顾客联系的主要途径。 怎样才能写得更好？简单的答案是练习。在过去8年中，博客和论文写作提高了我的写作能力。你也可以考虑在创意写作、非虚构写作、新闻写作或商务写作修一门课。我没有修过，但我希望我修过。 相反，我读了许多写作的书。于是，每次我写了一篇论文、信件或博客文章的时候，我联想到我怎样写得更好。通常我每周只记住一个要点，这周在这一方面提高，然后下周转到另一个。这样对写作能力确实提高了很多。 4 注重老师而不是教学大纲 &ensp; Focus on the teacher, not the topic 根据我的经验，你从好的老师那儿能收获更多， 而不是从教学大纲里。我上过太多教得很枯燥的课，我没有去上课， 即便去了也没有听， 我没有学到多少。 当我回想我收益最大的课，我觉得是社会理论家教授的加拿大历史课。加拿大历史的适用性不大，但这个教授是一位大师， 经常参与我们学生之间充满激情的辩论。从中我学会了思考，并尝试去挑战一些我对社会的基本假设。 我告诉我自己的学生，根据教学大纲挑选八九门课，其余四五门就去选择最吸引人的教授的课吧！ 5 不确定时，走能带来更多选的那条路 &ensp; When in doubt, choose the path that keeps the most doors open 如果你像大多数人一样，不知道你长大后想要什么。在这样的情况下，尽量不要缩小你的选择。当然了，要修学校里的精品课程，不过也要去学那些毕业后有大量的选择的专业，比如科学、历史、经济、政治等等。 要了解社会科学和自然科学的基础：统计和数学。大量的人文课也是最基本的课程，有了好的教授和教学大纲，历史或政治理论课将教你学会辩论、思考和写作。其他基本课程可能是计算机科学，还有我上面提到的 - 写作。 6 不要在上外语课上花太多时间 &ensp; Do the minimum foreign language classes 这是我最有争议的忠告之一。很多人不同意。 语言是非常重要的。除了英语，你应该多学一种（或多种）外语。但我认为最好是在你的暑假，或大学前，或毕业后。也许可以修两个入门课程，帮助你开始这门语言的学习，或者修两门高级课程，来巩固你的语言能力，仅此而已。 统计数据并不比语言更重要。但跳过统计课程的机会成本是很高的，因为离开学校很难找到学习统计的机会。毕竟，我们在大学只能修30或40门课程。在校园外，我们还有很多其他的机会可以学习一门语言。 7 到不熟悉的地方去 &ensp; Go to places that are unfamiliar to you 趁暑假或间隔年（gap year）到国外生活，一个与家乡完全不同的地方，在那里你会了解当地的人和文化。 当我还是一个学生的时候，有一天我意识到我在地图上找不到葡萄牙，这个羞辱使我阅读一些历史并且来了一次欧洲之旅。 我希望我能在一个地方呆更长的时间。短期的旅行，住青年旅馆、穷游一周，并不会教给你另一种生活。直到我开始我的研究项目，在印度、肯尼亚和乌干达待了很长时间，我才开始了解更多的世界（和我自己）。 我鼓励人们离开他们的舒适区。当我21岁去欧洲，我是那么的缺乏经验，我发现东欧乃至西班牙太吓人，因为我太依恋熟悉的区域… 十年后，我意外地发现自己在非洲一处被战争蹂躏的角落里工作，这就是我今天的事业。我不推荐给大家。不过，我鼓励美国学生离开英语国家，多出去看看。因此，学习语言更有必要。 8 上小班课，便于教授写推荐信 Take some small classes with professors who can write recommendations 如果你对读研究生不感兴趣，可以直接跳到下一个忠告。但是，如果想读一个硕士或博士学位，你至少需要两三封高品质的推荐信。要做到这一点，你需要与教授保持良好的关系。多上小班课，多和老师交流，也许可以获得一个助研、助教的职位，或者直接问他是否可以做你的论文或独立研究的顾问。 9 除非你必须写论文，否则写前要三思 &ensp; Unless you’re required to write a thesis, think twice before committing to one 一个独立的研究项目可以是你的大学时光完美的顶峰。遗憾的是，我经常看到，学生花大量的时间和精力投入到写论文中，很不值得。这些时间可以更好地用于获得技术技能。 我曾经建议大四学生如果他们有选择不写毕业论文。在我的博客获得了大量的争议后，我决定改变我的看法，毕业论文是很重要，但最好是专注于自己感兴趣的话题，试着把论文研究和职业选择联系起来。 10 更新你的思想 &ensp; Blow your mind 在每年大学课程结束时，你应该回顾梳理一下自己的想法， 是否发现12个月前的想法已经过时了。如果没有，可能你的探索和努力还不够。 即便在大学毕业后，这也是个好习惯。虽然很难让自己惊喜，或改变自己的世界观，但这世界上仍然有非常多新的东西可以学习。最简单的方法是看书，尤其是超出了我们专业范围的书。 我看不同寻常的书籍。我也试着不同领域的报纸和杂志。我几乎每隔一段时间换些期刊，而不是坚持多年看同一个期刊。在过去的一年，我一直在阅读“纽约书评”（ New York Review of Books），该书评评论有几百种科目。在此前，它一直是外交政策或时事杂志，或者艺术家的选择。我还阅读网络上不同来源的新闻条目。 另一种方法是，设法在新的地方度过有意义的时间。我很幸运，我的工作把我带到另一个发展中国家，每隔一段时间，每一个新的地方改变了我思考发展的方式。同样，过去我做管理顾问时，在新兴产业的工作和公司让我挑战旧的信仰，或想出新的。志愿者工作也是如此。无论你走到哪里，你需要融入当地，即使只有几个星期或几个月。]]></content>
      <categories>
        <category>语录</category>
      </categories>
      <tags>
        <tag>tag1</tag>
        <tag>tag2</tag>
        <tag>tag3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何只用一周时间进入一个新的专业？]]></title>
    <url>%2F2018%2F02%2F09%2F%E5%A6%82%E4%BD%95%E5%8F%AA%E7%94%A8%E4%B8%80%E5%91%A8%E7%9A%84%E6%97%B6%E9%97%B4%E8%BF%9B%E5%85%A5%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E4%B8%93%E4%B8%9A%2F</url>
    <content type="text"><![CDATA[向一个专业人士求教，他会给你介绍这个专业如何深奥，顺便送你一串冷僻的名词，让你望而生畏。有人自己没有真的懂，只是念熟了无数空洞的名词，再用这些冷僻的名词堆砌出高高门槛，将你拦在门外。 1 第一天，寻找牛人 是否能快速进入新专业，找到牛人是关键。牛人的标准是真的很懂，而且会讲，能一句话切中要害，打个比方就能让你恍然大悟。这种牛人很难找，要找很多专业人士去打听业内的牛人。通常牛人对善于学习的人很热情。 2 第二天，初步阅读 多收集资料，从中挑出好的，止阅读前言、引言、总论等，了解专业的概况，有个大致印象，先在高处看看专业全貌，才知道如何学习具体内容。 3 第三天，对着目标分解空白 对着目标学习知识，否则会被各种书本和文献诱惑得失去方向，想想为什么要学这个专业，不管为什么，先建立一个文档，根据学习目标，分解出需要填补的一个个空白，等待后续学习来填补。每个专业都是汪洋大海，学习不是喝干大海，而是从大海中寻找到你要的答案。所以先明确你的问题。 4 第四天，查找资料填补空白 这时候你已经对专业有了大概了解，通过分解目标，知道需要寻找什么知识点，在资料中寻找有用的资料，将它们一块块填补到分解的空白中，不要怕你的认识很碎片，你的资料不权威，先将空白都填补上。先解决有无，再解决好坏。 5 第五天，形成思路 整理写好的文档，形成报告。前两天积累的破碎的材料，通过反反复复的排列，你会慢慢看到思路，逐步形成一个有逻辑的报告。当思路刚刚冒头的时候，很多人对自己太苛刻，害怕自己形成错误的思路，吓得完全没思路。要培养思路，可以有错误有偏见，先建立一套想法，后面慢慢完善。思路是材料积累后自然发酵出来的。 6 第六天，讲给别人听 完善思路的最好办法就是讲给别人听。让内行的外行的人反驳你、质疑你。你在讲述过程中梳理自己的想法，那些错误和偏见会慢慢被洗刷掉。最有效的学习方法就是讲给别人听，讲着讲着自己就懂了。 7 第七天，质疑牛人 这时候你有一定自信了，该去质疑牛人了。回想当初牛人给你讲的内容，好像有些与你的认识不同，有些没有你思考的清楚。去找牛人重新理论，给他讲讲你的认识。让他告诉你专业深层次的内容，让他清洗你忽略的瑕疵。这番洗礼，让你认识到自己的不足，也让你成为可以与牛人对话的专业人士。最好的提问就是质疑对方错了。 8 第八天，提出自己的观点 学会的标准不是讲别人的知识装进自己的大脑，而是对别人的认识提出自己的批评。有用的知识也不是重复别人的成果，而是找到了改进的理由。既然你是外行闯入，你看问题的角度应当有些心意，更容易发现那些业内人士难以意识到的问题。也许融合两个专业的机遇就在你的面前。最好的成果就是改进了别人的认识。 ———————————————————————————————————————— 当你完成任务的时候，回过头看，总会发现有更高效的方法，如果你用一天就浪费了半天，如果你用一小时就浪费了半小时。]]></content>
      <categories>
        <category>语录</category>
      </categories>
      <tags>
        <tag>tag1</tag>
        <tag>tag2</tag>
        <tag>tag3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[my first blog]]></title>
    <url>%2F2018%2F02%2F09%2Fmy-first-blog%2F</url>
    <content type="text"><![CDATA[前言使用github pages服务搭建博客的好处有： 全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的； 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台； 等等； $\phi$]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>tag1</tag>
        <tag>tag2</tag>
        <tag>tag3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F02%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
